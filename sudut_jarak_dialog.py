# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SudutJarakDialog
                                 A QGIS plugin
 Penggambaran sudut dan jarak
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-11-24
        git sha              : $Format:%H$
        copyright            : (C) 2023 by DanyLaksonoCorp
        email                : danylaksono@ugm.ac.id
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtCore import QVariant

from qgis.core import (QgsVectorLayer, QgsProject, QgsFeature, QgsGeometry, QgsPointXY,
                       QgsLineString, QgsPoint, QgsMarkerSymbol, QgsSimpleMarkerSymbolLayer,
                       QgsField, QgsVectorDataProvider)
from qgis.utils import iface

import numpy as np
# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'sudut_jarak_dialog_base.ui'))

class SudutJarakDialog(QtWidgets.QDialog, FORM_CLASS):
    hitung = 1
    x_hasil = 0
    y_hasil = 0
    x_input = 0
    y_input = 0
    list_koor = []
    list_point = []
    atribut = {}
    list_kolom = []
    kolom_atribut = []
    dict_koor = {}
    list_poligon = []
    def __init__(self, parent=None):
        """Constructor."""
        super(SudutJarakDialog, self).__init__(parent)
        self.setupUi(self)
        self.iface = iface
        self.gambar.clicked.connect(self.gambar_plot)
        self.add_poligon.clicked.connect(self.tambah_poligon)
        self.add_atribut.clicked.connect(self.tambah_atribut)
        self.poligon_selesai.clicked.connect(self.gambar_poligon)

    def gambar_plot(self):
        try :
            if float(self.input_x.text()) > float(self.input_y.text()):
                print('Koordinat yang anda masukkan mungkin terbalik!')
                print(f'({float(self.input_y.text())}) sebagai X')
                print(f'({float(self.input_x.text())}) sebagai Y')
                print('Silahkan masukkan koordinat dengan benar!')
            else :
                if float(self.input_x.text()) != SudutJarakDialog.x_input and float(self.input_y.text()) != SudutJarakDialog.y_input:
                    x_awal = float(self.input_x.text())
                    y_awal = float(self.input_y.text())
                    SudutJarakDialog.list_koor.append(QgsPointXY(x_awal, y_awal))
                    SudutJarakDialog.list_point.append(QgsPoint(x_awal, y_awal))
                else:
                    x_awal = SudutJarakDialog.x_hasil
                    y_awal = SudutJarakDialog.y_hasil

                d = float(self.input_d.text())
                if d >= 6371000:
                    print('\033" + warning! The distance you entered exceeds the distance of the curvature of the earth!  + "\033')
                else :
                    az = float(self.input_az.text())
                    epsg = int(self.crs.text())

                    x_akhir = x_awal + d * np.sin(np.radians(az))
                    y_akhir = y_awal + d * np.cos(np.radians(az))

                    self.buat_titik(x_awal, y_awal, epsg, 'Awal', 'red')
                    self.buat_titik(x_akhir, y_akhir, epsg, 'Akhir', 'blue')
                    self.buat_garis(x_awal, y_awal, x_akhir, y_akhir, epsg)

                    print(f'Titik Awal = ({x_awal}, {y_awal})')
                    print('Azimuth yang dimasukkan :', az)
                    print('Jarak yang dimasukkan   :', d)
                    print(f'\nTitik Akhir = ({x_akhir:.5f}, {y_akhir:.5f})')

                    SudutJarakDialog.x_input = float(self.input_x.text())
                    SudutJarakDialog.y_input = float(self.input_y.text())
                    SudutJarakDialog.x_hasil = x_akhir
                    SudutJarakDialog.y_hasil = y_akhir

                    SudutJarakDialog.list_koor.append(QgsPointXY(x_akhir, y_akhir))
                    SudutJarakDialog.list_point.append(QgsPoint(x_akhir, y_akhir))
        except Exception as e:
            print(e)
    
    def buat_titik(self, x, y, epsg, nama_layer, warna):
        layer = QgsVectorLayer(f"Point?crs=EPSG:{epsg}", f"Plot Titik {nama_layer}", "memory")
        QgsProject.instance().addMapLayer(layer)
        feature = QgsFeature()
        feature.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(x, y)))
        layer.dataProvider().addFeatures([feature])
        layer.updateExtents()

        symbol = QgsMarkerSymbol.createSimple({'name': 'circle', 'color': warna, 'size': '3'})
        layer.renderer().setSymbol(symbol)

    def buat_garis(self, x1, y1, x2, y2, epsg):
        layer = QgsVectorLayer(f"LineString?crs=EPSG:{epsg}", "Plot Garis", "memory")
        QgsProject.instance().addMapLayer(layer)

        garis = QgsGeometry.fromPolyline([QgsPoint(x1, y1), QgsPoint(x2, y2)])
        feature = QgsFeature()
        feature.setGeometry(garis)

        layer.dataProvider().addFeatures([feature])
        layer.updateExtents()

    def buat_garis2(self, point1, point2, epsg):
        layer = QgsVectorLayer(f"LineString?crs=EPSG:{epsg}", "Garis Akhir", "memory")
        QgsProject.instance().addMapLayer(layer)

        garis = QgsGeometry.fromPolyline([point1, point2])
        feature = QgsFeature()
        feature.setGeometry(garis)

        layer.dataProvider().addFeatures([feature])
        layer.updateExtents()

    def tambah_atribut(self):
        koloms = self.kolom.text()
        tipe_data = self.tipe.text()
        if tipe_data == 'char' or tipe_data == 'character' or tipe_data == 'string':
            value = self.nilai.text()
            SudutJarakDialog.kolom_atribut.append(QgsField(koloms,QVariant.String))
        elif tipe_data == 'float' or tipe_data == 'numeric':
            value = float(self.nilai.text())
            SudutJarakDialog.kolom_atribut.append(QgsField(koloms, QVariant.Double))
        elif tipe_data == 'int' or tipe_data == 'integer':
            value = int(self.nilai.text())
            SudutJarakDialog.kolom_atribut.append(QgsField(koloms, QVariant.Int))

        SudutJarakDialog.list_kolom.append(koloms)
        SudutJarakDialog.atribut[koloms] = value
        print(f'''nilai '{value}' untuk kolom "{koloms}" berhasil ditambahkan ke atribut poligon ke-{SudutJarakDialog.hitung}''')

    def hitung_luas(self, poligon):
        return poligon.area()

    def tambah_poligon(self):
        SudutJarakDialog.hitung += 1
        atribut = SudutJarakDialog.atribut
        kolom = SudutJarakDialog.kolom_atribut
        list_kolom = SudutJarakDialog.list_kolom
        epsg = int(self.crs.text())

        SudutJarakDialog.list_koor.append(SudutJarakDialog.list_koor[0])
        SudutJarakDialog.list_point.append(SudutJarakDialog.list_point[0])
        polygon = QgsGeometry.fromPolygonXY([SudutJarakDialog.list_koor])

        SudutJarakDialog.dict_koor['koord'] = polygon
        luas = self.hitung_luas(polygon)

        for i in list_kolom:
            SudutJarakDialog.dict_koor[i] = atribut[i]

        SudutJarakDialog.dict_koor['Luas'] = luas
        
        self.buat_garis2(SudutJarakDialog.list_point[-1], SudutJarakDialog.list_point[-2], epsg)
        SudutJarakDialog.list_poligon.append(SudutJarakDialog.dict_koor)

        SudutJarakDialog.dict_koor = {}
        SudutJarakDialog.list_point = []
        SudutJarakDialog.list_koor = []
        SudutJarakDialog.x_input = 0
        SudutJarakDialog.y_input = 0
        SudutJarakDialog.x_hasil = 0
        SudutJarakDialog.y_hasil = 0

    def gambar_poligon(self):
        count = 0
        epsg = int(self.crs.text())
        atribut = SudutJarakDialog.atribut
        kolom = SudutJarakDialog.kolom_atribut
        list_kolom = SudutJarakDialog.list_kolom
        list_plot = SudutJarakDialog.list_poligon

        layer = QgsVectorLayer(f"Polygon?crs=EPSG:{epsg}", "Plot Poligon", "memory")
        QgsProject.instance().addMapLayer(layer)
        provider = layer.dataProvider()
        provider.addAttributes(kolom)
        layer.updateFields()

        for i in list_plot:
            count+=1
            feature = QgsFeature()
            feature.setGeometry(i['koord'])

            feature.setAttributes([i[j] for j in list_kolom])
            provider.addFeatures([feature])
            print(f'''Luas Poligon dengan kolom "{list_kolom[0]}" ='{i[list_kolom[0]]}' adalah {i['Luas']} meter persegi''')
        QgsProject.instance().addMapLayer(layer)

        SudutJarakDialog.hitung = 1
        SudutJarakDialog.list_koor = []
        SudutJarakDialog.atribut={}
        SudutJarakDialog.kolom_atribut=[]
